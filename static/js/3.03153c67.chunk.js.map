{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileStatusWithHoocks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","Post","props","className","s","item","src","post","name","text","likes","MyPosts","React","memo","console","log","posts","postsData","forEach","index","push","postsBlock","AddNewPostFormRedux","onSubmit","formData","dispatch","addPost","newPostText","reset","reverse","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","placeholder","validate","required","MyPostsContainer","connect","state","profilePage","addPostActionCreator","ProfileStatusWithHoocks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","isOwner","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","value","ProfileDataFormReduxForm","profile","error","createField","Input","type","Object","entries","contacts","map","contact","contactItem","style","formSummaryError","Contact","contactTitle","contactValue","ProfileData","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","onClick","ProfileInfo","Preloader","descriptionBlock","avatar","photos","large","defaultAvatar","target","files","length","savePhoto","initialValues","saveProfile","then","Profile","content","ProfileContainer","userId","this","match","params","authorizedUserId","history","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","id","isAuth","withRouter","withAuthRedirect"],"mappings":"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","file":"static/js/3.03153c67.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3cd8Y\",\"profileImg\":\"ProfileInfo_profileImg__3mXT7\",\"avatar\":\"ProfileInfo_avatar__3xuFq\",\"contactItem\":\"ProfileInfo_contactItem__X2L-c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2ifKf\",\"posts\":\"MyPosts_posts__3tZ1c\"};","import React, { useState } from \"react\";\nimport s from './Post.module.css'\n\nconst Post = (props) => {\n\n  return (\n    <div className={s.item}>\n      <img src={props.post.src}/>\n      <span>{props.post.name}, {props.post.text}</span>\n      <div>\n        <span>{props.post.likes} likes</span>\n      </div>\n    </div>\n  )\n}\n\nexport default Post;","import React from \"react\";\nimport Post from \"./Post/Post\";\nimport s from './MyPosts.module.css';\nimport { Field, reduxForm, reset } from \"redux-form\";\nimport { maxLengthCreator, required } from \"../../../utils/validators/validators\";\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\n\nconst MyPosts = React.memo((props) => {\n\n  console.log('RENDEAR YOOO')\n  let posts = [];\n  props.postsData.forEach((item, index) => {\n    posts.push(\n      <Post post={item} key={index}/>\n    )\n  })\n  \n  const onAddPost = (formData, dispatch) => {\n    props.addPost(formData.newPostText);\n    dispatch(reset(\"ProfileAddNewPostForm\"))\n  }\n\n  return (\n    <div className={s.postsBlock}>\n      <h3>My posts</h3>\n      <AddNewPostFormRedux onSubmit={onAddPost}/>\n      <div className={s.posts}>\n        {posts.reverse()}\n      </div>\n    </div>\n  )\n})\n\nconst maxLength10 = maxLengthCreator(10);\n\nlet PostForm = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div>\n        <Field \n          component={Textarea} \n          name={'newPostText'} \n          placeholder=\"What's new?\"\n          validate={[required, maxLength10]}\n        />\n      </div>\n      <div>\n        <button>Add post</button>\n      </div>\n    </form>\n\n  )\n}\n\nconst AddNewPostFormRedux = reduxForm({\n  form: 'ProfileAddNewPostForm'\n})(PostForm)\n\nexport default MyPosts;","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {addPostActionCreator} from '../../../redux/profileReducer'\nimport MyPosts from \"./MyPosts\";\n\n// const MyPostsContainer = () => {\n  \n//   return (\n//     <StoreContext.Consumer> \n//     { (store) => {\n        \n//         let addPost = () => {\n//           let action = addPostActionCreator();\n//           store.dispatch(action);\n//         }\n      \n//         let onPostChange = (text) => {\n//           let action = updateNewPostTextActionCreator(text);\n//           store.dispatch(action);\n//         }\n        \n//         return (\n//           <MyPosts \n//               updateNewPostText = {onPostChange} \n//               addPost={addPost} \n//               postsData={store.getState().profilePage.postsData} \n//               newPostText={store.getState().profilePage.newPostText}\n//           />\n//         )\n//       }\n//     }\n//     </StoreContext.Consumer>\n//   ) \n// }\n\nconst mapStateToProps = (state) => {\n  return {\n    postsData: state.profilePage.postsData,\n    newPostText: state.profilePage.newPostText\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addPost: (newPostText) => {\n      dispatch(addPostActionCreator(newPostText));\n    },\n  }\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\nexport default MyPostsContainer;","import React, { useEffect, useState } from \"react\";\n\nconst ProfileStatusWithHoocks = (props) => {\n\n  // let stateWithSetState =  useState(false);\n  // let editMode = stateWithSetState[0];\n  // let setEditMode = stateWithSetState[1];\n\n  let [editMode, setEditMode] = useState(false);\n  let [status, setStatus] = useState(props.status);\n\n  useEffect( () => {\n    setStatus(props.status)\n  }, [props.status])\n\n  const activateEditMode = () => {\n    if (props.isOwner) {\n      setEditMode(true);\n    }\n  }\n  const deactivateEditMode = () => {\n    setEditMode(false);\n    props.updateStatus(status);\n  }\n  const onStatusChange = (e) => {\n    setStatus(e.currentTarget.value)\n  }\n\n  return (\n    <div>\n      {!editMode &&\n        <div>\n          <b>Status: </b><span onDoubleClick={activateEditMode}>{props.status || '--------'}</span>\n        </div>\n      }\n      {editMode && \n        <div>\n          <input autoFocus={true} onBlur={deactivateEditMode} onChange={onStatusChange} value={status}/>\n        </div>\n      }\n    </div>\n  )\n  \n} \n\nexport default ProfileStatusWithHoocks;","import React from \"react\";\nimport {createField, Textarea, Input} from '../../common/FormsControls/FormsControls';\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\nimport {reduxForm } from \"redux-form\";\nimport s from './ProfileInfo.module.css';\nimport style from '../../common/FormsControls/FormsControl.module.css'\n//placeholder, name, validators, component, props = {}, text = \"\"\nconst ProfileDataForm = ({isOwner, handleSubmit, profile, error}) => {\n  const maxLength30 = maxLengthCreator(30);\n\n  return (\n    <form onSubmit={handleSubmit}>\n      \n        <div>\n          <b>Full name:</b> {createField('fullname', 'fullName', [], Input)}\n        </div>\n        <div>\n          <b>Looking for a job:</b> {createField('', 'lookingForAJob', [], Input, {type: \"checkbox\"} )}\n        </div>\n        <div>\n          <b>My pprofessionals skills:</b> {createField('my professional skills', 'lookingForAJobDescription', [], Textarea)}\n        </div>\n        \n        <div>\n          <b>About me:</b> {createField('about me', 'aboutMe', [], Textarea)}\n        </div>\n        <div>\n          <b>Contacts:</b>\n          { Object.entries(profile.contacts).map(contact => <div className={s.contactItem} key={contact[0]}>\n                                                                <b>{contact[0]}</b>\n                                                                {createField(contact[0], `contacts.${contact[0]}`, [], Input)}\n                                                            </div>)}\n        </div>\n        {isOwner && \n        <button>Save changes</button>\n        }\n        {error ? <div className={style.formSummaryError}>\n        {error}\n      </div> : ''}\n    </form>\n  )\n}\n\nconst ProfileDataFormReduxForm = reduxForm({\n  form: 'editProfile'\n})(ProfileDataForm)\n\nexport default ProfileDataFormReduxForm;","import React, { useEffect, useState } from \"react\";\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport s from './ProfileInfo.module.css';\nimport defaultAvatar from '../../../../src/assets/images/defaultAvatar.png';\nimport ProfileStatusWithHoocks from \"./ProfileStatusWithHoocks\";\nimport ProfileDataFormReduxForm from \"./ProfileDataForm\";\n\nconst ProfileInfo = (props) => {\n\n\n  let [editMode, setEditMode] = useState(false);\n\n  if (!props.profile) {\n    return <Preloader/>\n  }\n\n\n  const onMainPhotoSelected = (e) => {\n    if (e.target.files.length) {\n      props.savePhoto(e.target.files[0]);\n    }\n  }\n\n  const goToEditMode = () => {\n    setEditMode(true);\n  }\n\n  const onSubmit = (formData) => {\n    props.saveProfile(formData)\n    .then(() => {\n      setEditMode(false)\n    })\n  }\n\n  return (\n  <div>\n    <div>\n      {/* <img  className={s.profileImg} src={props.profile.photos.large} /> */}\n    </div>\n    <div className={s.descriptionBlock}>\n      <div>\n        <img className={s.avatar} src={props.profile.photos.large ? props.profile.photos.large : defaultAvatar}/>\n        {props.isOwner && <div>\n                            <input type=\"file\" onChange={onMainPhotoSelected}/>\n                          </div>}\n        <ProfileStatusWithHoocks isOwner={props.isOwner} status={props.status} updateStatus={props.updateStatus}/>\n      </div>\n      {editMode \n        ? <ProfileDataFormReduxForm  initialValues={props.profile} \n                            isOwner={props.isOwner}\n                            profile={props.profile}\n                            onSubmit={onSubmit}\n                          /> \n        : <ProfileData  profile={props.profile} \n                        isOwner={props.isOwner} \n                        goToEditMode={goToEditMode}\n                      />}\n      \n    </div>\n  </div>\n)\n}\n\nconst Contact = ({contactTitle, contactValue}) => {\n  return (\n    <div className={s.contactItem}>\n      <b>{contactTitle}</b>: {contactValue}\n    </div>\n  )\n}\nconst ProfileData = ({profile, isOwner, goToEditMode}) => {\n  return (\n    <div>\n        <div>\n          <b>Full name:</b> {profile.fullName}\n        </div>\n        <div>\n          <b>Looking for a job:</b> {profile.lookingForAJob ? \"yes\" : \"no\"}\n        </div>\n        {profile.lookingForAJob &&\n        <div>\n          <b>My pprofessionals skills:</b> {profile.lookingForAJobDescription}\n        </div>\n        }\n        <div>\n          <b>About me:</b> {profile.aboutMe}\n        </div>\n        <div>\n          <b>Contacts:</b>\n          { Object.entries(profile.contacts).map(contact => <Contact \n                                                                    contactTitle={contact[0]} \n                                                                    contactValue={contact[1]}\n                                                                    key={contact[0]}\n                                                                  />)}\n        </div>\n        {isOwner && \n        <button onClick={goToEditMode}>Edit profile information</button>\n        }\n      </div>\n  )\n}\n\n\nexport default ProfileInfo;","import React from \"react\";\nimport { Redirect } from \"react-router\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport s from './Profile.module.css'\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\n\nconst Profile = (props) => {\n  return (\n  <div className={s.content}>\n    {props.aboutMe}\n    <ProfileInfo \n      profile={props.profile} \n      updateStatus={props.updateStatus} \n      status={props.status}\n      isOwner={props.isOwner}\n      savePhoto={props.savePhoto}\n      saveProfile={props.saveProfile}\n    />\n    <MyPostsContainer \n      // store={props.store}\n      // postsData={props.profilePage.postsData} // берем только state.profilePage.postsData\n      // newPostText={props.profilePage.newPostText} // берем только свойство для текущего текста state.profilePage.newPostText\n      // dispatch={props.dispatch}\n      // addPost={props.addPost} \n      // updateNewPostText={props.updateNewPostText}\n    />\n  </div>\n)\n}\n\nexport default Profile;","import React from \"react\";\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile} from '../../redux/profileReducer'\nimport {withRouter} from \"react-router\";\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect'\nimport {compose} from \"redux\";\n\n\nclass ProfileContainer extends React.Component {\n\n  refreshProfile() {\n    let userId = this.props.match.params.userId;\n    if (!userId) {\n      userId = this.props.authorizedUserId;\n      if (!userId) {\n        this.props.history.push(\"/login\")\n      }\n    }\n    this.props.getUserProfile(userId);\n    this.props.getStatus(userId);\n  }\n\n  componentDidMount() {\n    this.refreshProfile();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if(prevProps.match.params.userId != this.props.match.params.userId) {\n      this.refreshProfile();\n    }\n  }\n\n  render() {\n    return (\n      <Profile \n        {...this.props} \n        status={this.props.status} \n        profile={this.props.profile} \n        updateStatus={this.props.updateStatus}\n        isOwner={!this.props.match.params.userId}\n        savePhoto={this.props.savePhoto}\n        saveProfile={this.props.saveProfile}\n      />\n    )\n  }\n\n}\n\nlet mapStateToProps = (state) => {\n  return {\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.id,\n    isAuth: state.auth.isAuth\n  }\n}\n\nexport default compose(\n  connect(mapStateToProps, {\n    getUserProfile,\n    getStatus,\n    updateStatus,\n    savePhoto,\n    saveProfile\n  }),\n  withRouter,\n  withAuthRedirect\n)(ProfileContainer) "],"sourceRoot":""}